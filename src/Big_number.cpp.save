#include "Big_number.h"
#include <string>

/* Big_number::Big_number(const unsigned long long int  ulli_max=12, vector <unsigned long long int> vect): ULLI_MAX_(ulli_max)
  {
       size_t vect_size=vect.size();
       string number;

       for(size_t i =0; i <vect_size; i++)
       {
           number+=to_string(vect[i]);
       }
  }*/

//  ************************ STRING CONSTRUCTOR ***********************
Big_number::Big_number(string str_number) : ULLI_MAX_(ULLONG_MAX), size_string_MAX_(20) // TODO
{
    string_number_ = str_number;
    size_string_number_ = str_number.length();

    string_MAX_ = to_string(ULLI_MAX_);
    reverse(string_MAX_.begin(), string_MAX_.end());
    size_t size_str_number = str_number.length();

    while (size_str_number >= size_string_MAX_)
    {
        if (my_vec_number_[1] == ULLI_MAX_)
        {
            my_vec_number_[1] += 1;
            my_vec_number_.insert(my_vec_number_.begin(), 0);
        }
        my_vec_number_[1] += 1;

        reverse(str_number.begin(), str_number.end());
        string_MAX_.resize(size_str_number, '0');

        string string_number_substr;
        string_number_substr.resize(size_str_number, '0');

        int carry = 0;
        for (int i = 0; i < size_str_number; i++)
        {
            string_number_substr[i] = str_number[i] - carry - string_MAX_[i] + '0';
            carry = 0;
            if (string_number_substr[i] < '0')
            {
                string_number_substr[i] += 10;
                carry = 1;
            }
        }

        for (int j = 0; j < size_str_number; j++)
        {
            str_number[j] = string_number_substr[j];
        }

        reverse(str_number.begin(), str_number.end());
        int size_to_erase = str_number.find_first_not_of("0");
        str_number.erase(0, size_to_erase);
        size_str_number = str_number.length();
    }
    if (size_str_number < size_string_MAX_)
    {
        my_vec_number_.push_back(0);
        my_vec_number_.push_back(stoull(str_number));
    }
}

//  ************************ DESTRUCTOR ***********************

Big_number::~Big_number()
{
    //dtor
}

//  ************************ OPERATORS ************************

//  ******************* = ******************
Big_number Big_number::operator=(const Big_number &other)
{
    if (this == &other)
        return *this;

    string_number_ = other.string_number_;
    string_MAX_ = other.string_MAX_;
    my_vec_number_ = other.my_vec_number_;
    size_string_number_ = other.size_string_number_;
    return *this;
}

//  ******************* == ******************
bool Big_number::operator==(const Big_number &other) const
{
    return string_number_ == other.string_number_ && string_MAX_ == other.string_MAX_ && my_vec_number_ == other.my_vec_number_ && size_string_number_ == other.size_string_number_;
}

//  ******************* == ******************
bool Big_number::operator>const Big_number &other) const
{
    return string_number_.compare
}

//  ******************* == ******************
bool Big_number::operator<(const Big_number &other) const
{
    return 
}

//  ******************* + ******************
Big_number Big_number::operator+(const Big_number &other) const
{
    int what_is_longer, carry = 0;
    size_t size_str_number_sum;
    string str_number_one = string_number_;
    string str_number_two = other.string_number_;
    string sum_string_number;

    if (size_string_number_ > other.size_string_number_)
    {
        what_is_longer = size_string_number_;
        str_number_two.resize(what_is_longer, '0');
        sum_string_number.resize(what_is_longer, '0');
    }
    else
    {
        what_is_longer = other.size_string_number_;
        str_number_one.resize(what_is_longer, '0');
        sum_string_number.resize(what_is_longer, '0');
    }

    reverse(str_number_one.begin(), str_number_one.end());
    reverse(str_number_two.begin(), str_number_two.end());

    for (int sum = 0; sum < what_is_longer; sum++)
    {
        sum_string_number[sum] = carry + str_number_one[sum] + str_number_two[sum] - '0';
        carry = 0;
        if (sum_string_number[sum] > '9')
        {
            sum_string_number[sum] -= 10;
            carry = 1;
        }
    }
    if (carry == 1)
    {
        sum_string_number.resize(what_is_longer + 1, '1');
    }

    reverse(sum_string_number.begin(), sum_string_number.end());
    return sum_string_number;
}

//  ******************* - ****************** FOR NOW WHEN NUM1 > NUM2
Big_number Big_number::operator-(const Big_number &other) const
{
    string string_number_substr;
    string string_number_lower;

    if (string_number_.compare(other.string_number_))
    {
        string_number_lower = other.string_number_;
        string_number_lower.resize(size_string_number_, 0);
        string_number_substr.resize(size_string_number_, 0);

        int carry = 0;
        for (int i = size_string_number_; i >= 0; i--)
        {
            string_number_substr[i] = string_number_[i] - carry - string_number_lower[i] + '0';
            carry = 0;
            if (string_number_substr[i] < '0' && i != 0)
            {
                string_number_substr[i] += 10;
                carry = 1;
            }
        }
        int size_to_erase = string_number_substr.find_first_not_of("0");
        string_number_substr.erase(0, size_to_erase);
        return string_number_substr;
    }

    // else if (other.string_number_.compare(string_number_))
    // {
    //     string_number_lower = string_number_;
    //     string_number_lower.resize(other.size_string_number_, 0);
    //     string_number_substr.resize(other.size_string_number_, 0);

    //     int carry = 0;
    //     for (int i = other.size_string_number_; i >= 0; i--)
    //     {
    //         string_number_substr[i] = other.string_number_[i] - carry - string_number_lower[i] + '0';
    //         carry = 0;
    //         if (string_number_substr[i] < '0' && i != 0)
    //         {
    //             string_number_substr[i] += 10;
    //             carry = 1;
    //         }
    //     }
    //     int size_to_erase = string_number_substr.find_first_not_of("0");
    //     string_number_substr.erase(0, size_to_erase);
    //     string_number_substr.insert(string_number_substr.begin(), '0');
    //     return string_number_substr;
    // }
}

//  ******************* * ******************
Big_number Big_number::operator*(const Big_number &other) const
{
    string str_number_multi;

    if (size_string_number_ == 0 || other.size_string_number_ == 0)
        return str_number_multi = "0";

    vector<int> result(size_string_number_ + other.size_string_number_, 0);

    // Indexes are used to find positions in result
    int index_num1 = 0;
    int index_num2 = 0;

    for (int i = size_string_number_ - 1; i >= 0; i--)
    {
        int carry = 0;
        int n1 = string_number_[i] - '0';

        index_num2 = 0;

        for (int j = other.size_string_number_ - 1; j >= 0; j--)
        {
            int n2 = other.string_number_[j] - '0';
            int sum = n1 * n2 + result[index_num1 + index_num2] + carry;

            carry = sum / 10;
            result[index_num1 + index_num2] = sum % 10;
            index_num2++;
        }

        if (carry > 0)
            result[index_num1 + index_num2] += carry;

        index_num1++;
    }

    int i = result.size() - 1;
    while (i >= 0 && result[i] == 0)
        i--;

    if (i == -1)
        return str_number_multi = "0";

    while (i >= 0)
        str_number_multi += to_string(result[i--]);

    return str_number_multi;
}
